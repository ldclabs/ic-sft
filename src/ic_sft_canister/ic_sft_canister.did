type Account = record { owner : principal; subaccount : opt vec nat8 };
type ChallengeArg = record {
  ts : nat64;
  asset_hash : vec nat8;
  author : principal;
};
type CreateTokenArg = record {
  asset_name : text;
  supply_cap : opt nat32;
  challenge : opt vec nat8;
  metadata : vec record { text; MetadataValue };
  name : text;
  description : opt text;
  author : principal;
  asset_content_type : text;
  asset_content : vec nat8;
};
type InitArg = record {
  supply_cap : opt nat64;
  tx_window : opt nat64;
  default_take_value : opt nat16;
  logo : opt text;
  permitted_drift : opt nat64;
  name : text;
  description : opt text;
  max_take_value : opt nat16;
  max_update_batch_size : opt nat16;
  max_query_batch_size : opt nat16;
  assets_origin : opt text;
  max_memo_size : opt nat16;
  atomic_batch_transfers : opt bool;
  symbol : text;
};
type MetadataValue = variant {
  Int : int;
  Nat : nat;
  Blob : vec nat8;
  Text : text;
};
type MintArg = record { token_id : nat; holders : vec principal };
type MintError = variant {
  SupplyCapReached;
  NonExistingTokenId;
  GenericBatchError : record { message : text; error_code : nat };
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat; Err : TransferError };
type Result_2 = variant { Ok : vec nat8; Err : text };
type Result_3 = variant { Ok : nat; Err : text };
type Result_4 = variant { Ok : nat; Err : MintError };
type Standard = record { url : text; name : text };
type TransferArg = record {
  to : Account;
  token_id : nat;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
  created_at_time : opt nat64;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  InvalidRecipient;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type UpdateCollectionArg = record {
  supply_cap : opt nat64;
  tx_window : opt nat64;
  default_take_value : opt nat16;
  logo : opt text;
  permitted_drift : opt nat64;
  name : opt text;
  description : opt text;
  max_take_value : opt nat16;
  max_update_batch_size : opt nat16;
  max_query_batch_size : opt nat16;
  assets_origin : opt text;
  max_memo_size : opt nat16;
  atomic_batch_transfers : opt bool;
};
type UpdateTokenArg = record {
  id : nat;
  asset_name : opt text;
  supply_cap : opt nat32;
  metadata : opt vec record { text; MetadataValue };
  name : opt text;
  description : opt text;
  author : opt principal;
  asset_content_type : opt text;
  asset_content : opt vec nat8;
};
service : (InitArg) -> {
  admin_set_managers : (vec principal) -> (Result);
  admin_set_minters : (vec principal) -> (Result);
  icrc7_atomic_batch_transfers : () -> (opt bool) query;
  icrc7_balance_of : (vec Account) -> (vec nat) query;
  icrc7_collection_metadata : () -> (vec record { text; MetadataValue }) query;
  icrc7_default_take_value : () -> (opt nat) query;
  icrc7_description : () -> (opt text) query;
  icrc7_logo : () -> (opt text) query;
  icrc7_max_memo_size : () -> (opt nat) query;
  icrc7_max_query_batch_size : () -> (opt nat) query;
  icrc7_max_take_value : () -> (opt nat) query;
  icrc7_max_update_batch_size : () -> (opt nat) query;
  icrc7_name : () -> (text) query;
  icrc7_owner_of : (vec nat) -> (vec opt Account) query;
  icrc7_supply_cap : () -> (opt nat) query;
  icrc7_supported_standards : () -> (vec Standard) query;
  icrc7_symbol : () -> (text) query;
  icrc7_token_metadata : (vec nat) -> (
      vec opt vec record { text; MetadataValue },
    ) query;
  icrc7_tokens : (opt nat, opt nat) -> (vec nat) query;
  icrc7_tokens_of : (Account, opt nat, opt nat) -> (vec nat) query;
  icrc7_total_supply : () -> (nat) query;
  icrc7_transfer : (vec TransferArg) -> (vec opt Result_1);
  sft_challenge : (ChallengeArg) -> (Result_2);
  sft_create_token : (CreateTokenArg) -> (Result_3);
  sft_create_token_by_challenge : (CreateTokenArg) -> (Result_3);
  sft_mint : (MintArg) -> (Result_4);
  sft_tokens_in : (nat, opt nat, opt nat) -> (vec nat) query;
  sft_update_collection : (UpdateCollectionArg) -> (Result);
  sft_update_token : (UpdateTokenArg) -> (Result);
}
