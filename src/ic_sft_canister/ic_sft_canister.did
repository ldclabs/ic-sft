type Account = record { owner : principal; subaccount : opt blob };
type ApprovalInfo = record {
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  expires_at : opt nat64;
  spender : Account;
};
type ApproveCollectionArg = record { approval_info : ApprovalInfo };
type ApproveCollectionError = variant {
  GenericError : record { message : text; error_code : nat };
  InvalidSpender;
  CreatedInFuture : record { ledger_time : nat64 };
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type ApproveTokenArg = record { token_id : nat; approval_info : ApprovalInfo };
type ApproveTokenError = variant {
  GenericError : record { message : text; error_code : nat };
  InvalidSpender;
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type ArchivedBlocks = record {
  args : vec GetBlocksRequest;
  callback : func (vec GetBlocksRequest) -> (GetBlocksResult) query;
};
type BlockWithId = record { id : nat; block : ICRC3Value };
type ChallengeArg = record { asset_hash : blob; author : principal };
type CreateTokenArg = record {
  asset_name : text;
  supply_cap : opt nat32;
  challenge : opt blob;
  metadata : vec record { text; ICRC3Value };
  name : text;
  description : opt text;
  author : principal;
  asset_content_type : text;
  asset_content : blob;
};
type GetArchivesArgs = record { from : opt principal };
type GetBlocksRequest = record { start : nat; length : nat };
type GetBlocksResult = record {
  log_length : nat;
  blocks : vec BlockWithId;
  archived_blocks : vec ArchivedBlocks;
};
type ICRC3ArchiveInfo = record {
  end : nat;
  canister_id : principal;
  start : nat;
};
type ICRC3DataCertificate = record { certificate : blob; hash_tree : blob };
type ICRC3Value = variant {
  Int : int;
  Map : vec record { text; ICRC3Value };
  Nat : nat;
  Blob : blob;
  Text : text;
  Array : vec ICRC3Value;
};
type InitArg = record {
  supply_cap : opt nat64;
  tx_window : opt nat64;
  default_take_value : opt nat16;
  logo : opt text;
  permitted_drift : opt nat64;
  name : text;
  description : opt text;
  max_take_value : opt nat16;
  max_update_batch_size : opt nat16;
  max_approvals_per_token_or_collection : opt nat16;
  max_query_batch_size : opt nat16;
  assets_origin : opt text;
  max_revoke_approvals : opt nat16;
  max_memo_size : opt nat16;
  atomic_batch_transfers : opt bool;
  symbol : text;
};
type IsApprovedArg = record {
  token_id : nat;
  from_subaccount : opt blob;
  spender : Account;
};
type MintArg = record { token_id : nat; holders : vec principal };
type MintError = variant {
  SupplyCapReached;
  NonExistingTokenId;
  GenericBatchError : record { message : text; error_code : nat };
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat; Err : ApproveCollectionError };
type Result_2 = variant { Ok : nat; Err : ApproveTokenError };
type Result_3 = variant { Ok : nat; Err : RevokeCollectionApprovalError };
type Result_4 = variant { Ok : nat; Err : RevokeTokenApprovalError };
type Result_5 = variant { Ok : nat; Err : TransferFromError };
type Result_6 = variant { Ok : nat; Err : TransferError };
type Result_7 = variant { Ok : blob; Err : text };
type Result_8 = variant { Ok : nat; Err : text };
type Result_9 = variant { Ok : nat; Err : MintError };
type RevokeCollectionApprovalArg = record {
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  spender : opt Account;
};
type RevokeCollectionApprovalError = variant {
  GenericError : record { message : text; error_code : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  ApprovalDoesNotExist;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type RevokeTokenApprovalArg = record {
  token_id : nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  spender : opt Account;
};
type RevokeTokenApprovalError = variant {
  GenericError : record { message : text; error_code : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  ApprovalDoesNotExist;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type SupportedBlockType = record { url : text; block_type : text };
type SupportedStandard = record { url : text; name : text };
type TokenApproval = record { token_id : nat; approval_info : ApprovalInfo };
type TransferArg = record {
  to : Account;
  token_id : nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  InvalidRecipient;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type TransferFromArg = record {
  to : Account;
  spender_subaccount : opt blob;
  token_id : nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  InvalidRecipient;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type UpdateCollectionArg = record {
  supply_cap : opt nat64;
  tx_window : opt nat64;
  default_take_value : opt nat16;
  logo : opt text;
  permitted_drift : opt nat64;
  name : opt text;
  description : opt text;
  max_take_value : opt nat16;
  max_update_batch_size : opt nat16;
  max_approvals_per_token_or_collection : opt nat16;
  max_query_batch_size : opt nat16;
  assets_origin : opt text;
  max_revoke_approvals : opt nat16;
  max_memo_size : opt nat16;
  atomic_batch_transfers : opt bool;
};
type UpdateTokenArg = record {
  id : nat;
  asset_name : opt text;
  supply_cap : opt nat32;
  metadata : opt vec record { text; ICRC3Value };
  name : opt text;
  description : opt text;
  author : opt principal;
  asset_content_type : opt text;
  asset_content : opt blob;
};
service : (InitArg) -> {
  admin_set_managers : (vec principal) -> (Result);
  admin_set_minters : (vec principal) -> (Result);
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc37_approve_collection : (vec ApproveCollectionArg) -> (vec opt Result_1);
  icrc37_approve_tokens : (vec ApproveTokenArg) -> (vec opt Result_2);
  icrc37_get_collection_approvals : (Account, opt ApprovalInfo, opt nat) -> (
      vec ApprovalInfo,
    ) query;
  icrc37_get_token_approvals : (nat, opt TokenApproval, opt nat) -> (
      vec TokenApproval,
    ) query;
  icrc37_is_approved : (vec IsApprovedArg) -> (vec bool) query;
  icrc37_max_approvals_per_token_or_collection : () -> (opt nat) query;
  icrc37_max_revoke_approvals : () -> (opt nat) query;
  icrc37_metadata : () -> (vec record { text; ICRC3Value }) query;
  icrc37_revoke_collection_approvals : (vec RevokeCollectionApprovalArg) -> (
      vec opt Result_3,
    );
  icrc37_revoke_token_approvals : (vec RevokeTokenApprovalArg) -> (
      vec opt Result_4,
    );
  icrc37_transfer_from : (vec TransferFromArg) -> (vec opt Result_5);
  icrc3_get_archives : (GetArchivesArgs) -> (vec ICRC3ArchiveInfo) query;
  icrc3_get_blocks : (vec GetBlocksRequest) -> (GetBlocksResult) query;
  icrc3_get_tip_certificate : () -> (opt ICRC3DataCertificate) query;
  icrc3_supported_block_types : () -> (vec SupportedBlockType) query;
  icrc7_atomic_batch_transfers : () -> (opt bool) query;
  icrc7_balance_of : (vec Account) -> (vec nat) query;
  icrc7_collection_metadata : () -> (vec record { text; ICRC3Value }) query;
  icrc7_default_take_value : () -> (opt nat) query;
  icrc7_description : () -> (opt text) query;
  icrc7_logo : () -> (opt text) query;
  icrc7_max_memo_size : () -> (opt nat) query;
  icrc7_max_query_batch_size : () -> (opt nat) query;
  icrc7_max_take_value : () -> (opt nat) query;
  icrc7_max_update_batch_size : () -> (opt nat) query;
  icrc7_name : () -> (text) query;
  icrc7_owner_of : (vec nat) -> (vec opt Account) query;
  icrc7_permitted_drift : () -> (opt nat) query;
  icrc7_supply_cap : () -> (opt nat) query;
  icrc7_symbol : () -> (text) query;
  icrc7_token_metadata : (vec nat) -> (
      vec opt vec record { text; ICRC3Value },
    ) query;
  icrc7_tokens : (opt nat, opt nat) -> (vec nat) query;
  icrc7_tokens_of : (Account, opt nat, opt nat) -> (vec nat) query;
  icrc7_total_supply : () -> (nat) query;
  icrc7_transfer : (vec TransferArg) -> (vec opt Result_6);
  icrc7_tx_window : () -> (opt nat) query;
  sft_challenge : (ChallengeArg) -> (Result_7);
  sft_create_token : (CreateTokenArg) -> (Result_8);
  sft_create_token_by_challenge : (CreateTokenArg) -> (Result_8);
  sft_mint : (MintArg) -> (Result_9);
  sft_tokens_in : (nat, opt nat, opt nat) -> (vec nat) query;
  sft_update_collection : (UpdateCollectionArg) -> (Result);
  sft_update_token : (UpdateTokenArg) -> (Result);
}
